---
// NEW: Import the new card component
import PartnerCard from "@/components/blocks/PartnerCard.astro";

export interface partner {
  name: string;
  logo: string;
  category: string;
  href: string;
  linkText: string;
}

interface Props {
  partners: partner[];
  activeCategory?: string;
}

const { partners = [], activeCategory = "Featured" } = Astro.props;

const allCategories = partners.flatMap((partner) =>
  partner.category.split(",").map((cat) => cat.trim()),
);
const uniqueCategories = [...new Set(allCategories)];
const tabs = ["Featured", ...uniqueCategories.sort()];
---

<div id="partners-table" class="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8">
  <!-- <div class="prose dark:prose-invert mb-12 max-w-full text-center">
    <h1>
      CHAMPS continues to empower professionals, foster partnerships, and drive
      impactful health initiatives.
    </h1>
  </div> -->

  <div
    id="partner-tabs"
    class="mb-10 flex flex-wrap justify-center gap-2 md:gap-3"
  >
    {
      tabs.map((tab) => (
        <button
          type="button"
          data-category={tab}
          class:list={[
            "partner-tab-trigger rounded-sm border px-4 py-2 text-sm font-medium md:text-base",
            tab === activeCategory
              ? "bg-primary/20 border-primary"
              : "hover:bg-primary/20 hover:border-primary bg-transparent",
          ]}
        >
          {tab}
        </button>
      ))
    }
  </div>

  <div class="relative w-full gap-6 lg:gap-12">
    {
      partners.map((partner, index) => (
        <PartnerCard partner={partner} index={index} />
      ))
    }
  </div>
</div>

<script>
  // This script remains unchanged as it controls the whole table.
  document.addEventListener("astro:page-load", () => {
    const tabContainer = document.getElementById("partner-tabs");
    if (!tabContainer) return;

    const rows = document.querySelectorAll<HTMLElement>(".partner-row");

    const handleTabClick = (e: Event) => {
      const clickedTab = (e.target as HTMLElement).closest<HTMLElement>(
        ".partner-tab-trigger",
      );
      if (!clickedTab) return;

      const category = clickedTab.dataset.category;
      if (!category) return;

      // Update tab styles
      tabContainer
        .querySelectorAll<HTMLElement>(".partner-tab-trigger")
        .forEach((tab) => {
          const isActive = tab === clickedTab;
          tab.classList.toggle("bg-primary/20", isActive);
          tab.classList.toggle("border-primary", isActive);
          tab.classList.toggle("bg-transparent", !isActive);
          tab.classList.toggle("hover:bg-primary/20", !isActive);
          tab.classList.toggle("hover:border-primary", !isActive);
        });

      // Filter partners
      rows.forEach((row) => {
        const categories =
          row.dataset.category?.split(",").map((c) => c.trim()) ?? [];
        row.hidden = !(
          category === "Featured" || categories.includes(category)
        );
      });
    };

    if ((window as any).cleanupPartnersTable) {
      (window as any).cleanupPartnersTable();
    }

    tabContainer.addEventListener("click", handleTabClick);

    (window as any).cleanupPartnersTable = () => {
      tabContainer.removeEventListener("click", handleTabClick);
    };
  });
</script>
