---
import DynamicIcon from "@/components/blocks/DynamicIcon.tsx";
import { cn } from "@/lib/utils.ts";
import type { Item } from "@/types.d.ts";

export interface Props {
  items?: Array<Item>;
  defaultIcon?: string;
  classes?: Record<string, string>;
}

const { items = [], classes = {}, defaultIcon } = Astro.props;

const {
  container: containerClass = "",
  panel: panelClass = "",
  title: titleClass = "",
  description: descriptionClass = "",
  icon: defaultIconClass = "text-primary dark:text-slate-200 border-primary dark:border-blue-700",
} = classes;
---

{
  items && items.length > 0 && (
    <div class={containerClass}>
      {items.map(
        (
          { title, description, icon, classes: itemClasses = {} },
          index = 0,
        ) => (
          <div
            class={cn(
              "intersect-once intersect-quarter motion-safe:md:intersect:animate-fade flex motion-safe:md:opacity-0",
              panelClass,
              itemClasses?.panel,
            )}
          >
            <div class="mr-4 flex flex-col items-center rtl:mr-0 rtl:ml-4">
              <div>
                <div class="flex items-center justify-center">
                  {() => {
                    const iconSource = icon || defaultIcon;

                    // Render the icon if one is available
                    return (
                      iconSource && (
                        <DynamicIcon
                          icon={iconSource}
                          className={cn(
                            "h-10 w-10 rounded-full border-2 p-2",
                            defaultIconClass,
                            itemClasses?.icon,
                          )}
                        />
                      )
                    );
                  }}
                </div>
              </div>
              {index !== items.length - 1 && (
                <div class="h-full w-px bg-black/10 dark:bg-slate-400/50" />
              )}
            </div>
            <div class={`pt-1 ${index !== items.length - 1 ? "pb-8" : ""}`}>
              {title && (
                <p
                  class={cn(
                    "text-xl font-bold",
                    titleClass,
                    itemClasses?.title,
                  )}
                  set:html={title}
                />
              )}
              {description && (
                <p
                  class={cn(
                    "text-muted mt-2",
                    descriptionClass,
                    itemClasses?.description,
                  )}
                  set:html={description}
                />
              )}
            </div>
          </div>
        ),
      )}
    </div>
  )
}
