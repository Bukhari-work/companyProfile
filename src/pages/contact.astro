---
import config from "@/config.json";
import Main from "@/layouts/Main.astro";
import { getEntry } from "astro:content";
import type { CollectionEntry } from "astro:content";
import Notice from "@/shortcodes/Notice";

import { footerData } from "@/navigation.ts";
import Social from "@/components/blocks/Social.astro";

const { socialLinks } = footerData;
const page = { title: "Contact" };
---

<Main content={page}>
  <section
    class="section-sm col-10 mx-auto grid grid-cols-1 gap-12 lg:grid-cols-[1fr_1fr] xl:col-8"
  >
  </section>
</Main>

<style>
  .is-invalid {
    border-color: #ef4444; /* Equivalent to Tailwind's border-red-500 */
  }

  input:focus,
  textarea:focus {
    box-shadow: 0 0 0 1px #3b82f6; /* Equivalent to Tailwind's ring-1 ring-blue-500 */
    outline: none;
  }

  .is-invalid:focus {
    box-shadow: 0 0 0 1px #ef4444; /* Equivalent to Tailwind's ring-1 ring-red-500 */
    outline: none;
  }
</style>

<script is:inline>
  const validateField = (field) => {
    const isValid = field.checkValidity();
    field.classList.toggle("is-invalid", !isValid);
  };

  document
    .querySelectorAll("input[required], textarea[required]")
    .forEach((field) => {
      // Validate on user interaction
      field.addEventListener("input", () => validateField(field));
      field.addEventListener("blur", () => validateField(field));
    });

  document
    .getElementById("contactForm")
    .addEventListener("submit", async (e) => {
      e.preventDefault();

      const form = e.target;
      const submitBtn = document.getElementById("submitBtn");
      const successMessage = document.getElementById("successMessage");
      const contactDescription = document.getElementById("contactDescription");
      const url = form.dataset.contactUrl;

      const website = form.website.value.trim();
      if (website) return;

      // Ensure grecaptcha is loaded before executing
      if (typeof grecaptcha === "undefined" || !grecaptcha) {
        throw new Error("reCaptcha is not loaded. Please try again later.");
      }

      try {
        // Get the reCAPTCHA token
        const token = await new Promise((resolve, reject) => {
          grecaptcha.ready(() => {
            grecaptcha
              .execute("6LdfBfYqAAAAAFIULe8Wl_X3hGIp3WTpcrpUMiO2", {
                action: "submit",
              })
              .then(resolve)
              .catch(reject);
          });
        });

        // Basic validation
        const name = form.name.value.trim();
        const email = form.email.value.trim();
        const message = form.message.value.trim();

        if (!name || !email || !message) {
          throw new Error("All fields are required");
        }

        // Add loading state
        submitBtn.disabled = true;
        submitBtn.textContent = "Submitting...";
        submitBtn.classList.remove("btn-primary");

        // Send form data
        const response = await fetch(url, {
          method: "POST",
          body: new URLSearchParams({
            name: name,
            email: email,
            message: message,
            recaptchaToken: token,
          }),
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
          },
        });

        const result = await response.json();

        if (result.status === "success") {
          document.getElementById("successName").textContent = name;
          document.getElementById("successUserMessage").textContent = message;
          document.getElementById("successEmail").textContent = email;

          form.reset();

          // Scroll to top
          window.scrollTo({ top: 0, behavior: "smooth" });

          // Show and animate success message
          successMessage.classList.remove("hidden");
          contactDescription.classList.add("hidden");
          successMessage.offsetWidth;
          successMessage.classList.remove("opacity-0", "translate-y-4");
          successMessage.classList.add("opacity-100", "translate-y-0");
          contactDescription.classList.remove("opacity-100", "translate-y-0");
          contactDescription.classList.add("opacity-0", "translate-y-4");

          // Automatically hide after some seconds with exit animation
          setTimeout(() => {
            successMessage.classList.remove("opacity-100", "translate-y-0");
            successMessage.classList.add("opacity-0", "translate-y-4");
            contactDescription.classList.remove("opacity-0", "translate-y-4");
            contactDescription.classList.add("opacity-100", "translate-y-0");

            setTimeout(() => {
              successMessage.classList.add("hidden");
              contactDescription.classList.remove("hidden");
            }, 300);
          }, 6000);
        } else {
          throw new Error(result.message || "Submission failed");
        }
      } catch (error) {
        alert(error.message);
      } finally {
        // Reset button state
        submitBtn.disabled = false;
        submitBtn.textContent = "Submit";
        submitBtn.classList.add("btn-primary");
      }
    });
</script>
