---
import Main from "@/layouts/Main.astro";
import PageHeader from "@/components/blocks/PageHeader.astro";
import Button from "@/components/ui-astro/Button.astro";
import ProgramCard from "@/components/blocks/ProgramCard.astro";
import Social from "@/components/blocks/Social.astro";
import { params } from "@/config.json";

// --- Static Page Data ---
const content = {
  title: "Our Programmes",
  meta_title: "Explore Our Programmes & Get In Touch",
  description:
    "We offer a variety of programmes to help you achieve your goals. Contact us for more information.",
  image: "/images/programmes.jpg",
  messageTitle: "Please fill out the following form",
};

// --- New Categorized Programmes Data with Icons ---
const programmeCategories = [
  {
    category: "Research",
    description:
      "At CHAMPS, research is at the core of our mission to strengthen health systems, policies, and services. We generate evidence-based insights that guide governments, healthcare institutions, and communities in making informed decisions.",
    programmes: [
      {
        title: "Health Policy & Governance",
        description:
          "Services include policy analysis, review, and health programme evaluation.",
        icon: "FaScaleBalanced",
      },
      {
        title: "Healthcare Administration & Management",
        description:
          "Services include hospital master plan development, feasibility studies, and business planning.",
        icon: "FaHospital",
      },
      {
        title: "Health Financing & Economics",
        description:
          "Expertise in tariff/unit cost studies and patient ability/willingness-to-pay research.",
        icon: "FaHandHoldingDollar",
      },
      {
        title: "Quality & Ethics in Healthcare",
        description:
          "Providing research ethics advisory and excellent service assessments.",
        icon: "FaShieldHalved",
      },
    ],
  },
  {
    category: "Capacity Building & Training",
    description:
      "CHAMPS develops comprehensive training programs that strengthen the skills of government officials, healthcare providers, and health leaders, equipping them to address todayâ€™s complex health challenges.",
    programmes: [
      {
        title: "Policy & Governance Excellence",
        description:
          "Training to craft stronger health policies, measure impact, and build advocacy skills.",
        icon: "FaChalkboardUser",
      },
      {
        title: "Leadership & Strategic Growth",
        description:
          "Training in Global Health Leadership, future-ready strategies, and scientific writing.",
        icon: "FaUsers",
      },
      {
        title: "Healthcare & Hospital Management",
        description:
          "Courses on optimizing primary care, hospital operations, data management, and lean methods.",
        icon: "IoBed",
      },
    ],
  },
  {
    category: "Consultation & Technical Assistance",
    description:
      "CHAMPS provides expert guidance to governments, health institutions, and hospitals in designing and implementing effective health systems, strategies, and programs.",
    programmes: [
      {
        title: "Policy Analysis & Advocacy",
        description:
          "Assistance with health policy analysis, regulation impact analysis, and policy influence.",
        icon: "FaMagnifyingGlass",
      },
      {
        title: "Strategic Planning",
        description:
          "Guidance for health organizations and hospitals to develop robust strategic plans.",
        icon: "FaCheckDouble",
      },
      {
        title: "Quality, Risk & Safety Management",
        description:
          "Implementing systems to advance quality standards and patient safety in institutions.",
        icon: "FaLifeRing",
      },
      {
        title: "Frontline Leadership & Lean Management",
        description:
          "Transforming service delivery through frontline leadership skills and patient-centered care.",
        icon: "FaHandshakeAngle",
      },
    ],
  },
  {
    category: "Strategic Advisory Services",
    description:
      "CHAMPS provides high-level advisory support to strengthen leadership capacity and guide the long-term growth of health organizations.",
    programmes: [
      {
        title: "Strategic Plan Development",
        description:
          "Develop a clear, evidence-based roadmap to achieve measurable growth and sustainability.",
        icon: "FaCompass",
      },
      {
        title: "Leadership & Learning Organization Development",
        description:
          "Evolve your organization into an agile, learning-driven institution ready for a changing health landscape.",
        icon: "FaBrain",
      },
    ],
  },
];
---

<Main content={content} makara>
  <PageHeader title={content.title} class="mb-12" />
  <div class="mx-auto max-w-6xl space-y-12 p-6 pb-24">
    <!-- ROW 1: Intro & Quick Links -->
    <section id="intro" class="bg-background rounded-xl border p-6">
      <div class="space-y-4">
        <h2 class="h3 mb-0">About these programmes</h2>
        <p class="text-muted-foreground text-sm">
          Use the quick links below to jump to a specific program.
        </p>

        <div class="mt-4 grid gap-4 sm:grid-cols-2">
          {
            programmeCategories.map((category) => (
              <a
                href={`#category-${category.category}`}
                class="hover:bg-primary/5 rounded-md border p-3 text-sm transition"
              >
                {category.category}
              </a>
            ))
          }
        </div>
      </div>
    </section>
    <section id="programmes" class="grid grid-cols-2 gap-4 space-y-12">
      {
        programmeCategories.map((category) => (
          <article
            class="bg-background rounded-xl border p-6 shadow-xl"
            id={`category-${category.category}`}
          >
            <h2 class="text-primary mb-2 border-b pb-2 text-center text-2xl font-bold">
              {category.category}
            </h2>
            <p class="text-muted-foreground mb-6">{category.description}</p>
            <div class="grid grid-cols-1 gap-6 md:grid-cols-2">
              {category.programmes.map((program) => (
                <ProgramCard data={program} />
              ))}
            </div>
          </article>
        ))
      }
    </section>

    <!-- ROW 3: Contact Form + Social -->
    <section id="contact" class="grid gap-6">
      <div class="bg-border dark:bg-darkmode-border rounded-xl border p-6">
        <h3 class="h5 mb-3">{content.messageTitle}</h3>

        <form
          id="contactForm"
          method="POST"
          data-contact-url={params.contact_form_url}
        >
          <div class="mb-4">
            <label for="name" class="form-label"
              >Full Name <span class="text-red-500">*</span></label
            >
            <input
              id="name"
              name="name"
              class="form-input w-full"
              placeholder="Budi Susanti"
              type="text"
              autocomplete="name"
              required
            />
          </div>

          <div class="mb-4 hidden" aria-hidden="true">
            <label for="website" class="form-label">Website</label>
            <input
              id="website"
              name="website"
              class="form-input w-full"
              placeholder="bukhari-work.github.io"
              type="text"
              autocomplete="off"
            />
          </div>

          <div class="mb-4">
            <label for="email" class="form-label"
              >Working e-Mail <span class="text-red-500">*</span></label
            >
            <input
              id="email"
              name="email"
              class="form-input w-full"
              placeholder="budi.susanti@email.com"
              type="email"
              autocomplete="email"
              required
            />
          </div>

          <div class="mb-4">
            <label for="message" class="form-label"
              >Message <span class="text-red-500">*</span></label
            >
            <textarea
              id="message"
              name="message"
              class="form-input w-full"
              placeholder="Message goes here..."
              rows="6"
              required></textarea>
          </div>

          <div class="flex items-center gap-3">
            <Button id="submitBtn" type="submit"> Submit </Button>
            <div id="inline-badge" class="inline-block"></div>
          </div>
        </form>
      </div>
    </section>
  </div>
</Main>

<script
  is:inline
  src="https://www.google.com/recaptcha/api.js?render=6LdfBfYqAAAAAFIULe8Wl_X3hGIp3WTpcrpUMiO2"
  async
  defer></script>

<script is:inline>
  // Form validation helpers (kept from original)
  const validateField = (field) => {
    const isValid = field.checkValidity();
    field.classList.toggle("is-invalid", !isValid);
  };

  document
    .querySelectorAll("input[required], textarea[required]")
    .forEach((field) => {
      field.addEventListener("input", () => validateField(field));
      field.addEventListener("blur", () => validateField(field));
    });

  document
    .getElementById("contactForm")
    .addEventListener("submit", async (e) => {
      e.preventDefault();
      const form = e.target;
      const submitBtn = document.getElementById("submitBtn");
      const url = form.dataset.contactUrl;
      const website = form.website.value.trim();
      if (website) return;
      if (typeof grecaptcha === "undefined" || !grecaptcha) {
        throw new Error("reCaptcha is not loaded. Please try again later.");
      }
      try {
        const token = await new Promise((resolve, reject) => {
          grecaptcha.ready(() => {
            grecaptcha
              .execute("6LdfBfYqAAAAAFIULe8Wl_X3hGIp3WTpcrpUMiO2", {
                action: "submit",
              })
              .then(resolve)
              .catch(reject);
          });
        });
        const name = form.name.value.trim();
        const email = form.email.value.trim();
        const message = form.message.value.trim();
        if (!name || !email || !message) {
          throw new Error("All fields are required");
        }
        submitBtn.disabled = true;
        submitBtn.textContent = "Submitting...";
        submitBtn.classList.remove("btn-primary");
        const response = await fetch(url, {
          method: "POST",
          body: new URLSearchParams({
            name: name,
            email: email,
            message: message,
            recaptchaToken: token,
          }),
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
          },
        });
        const result = await response.json();
        if (result.status === "success") {
          // show success notice inline (simple alert fallback)
          alert("Message sent â€” thank you!");
          form.reset();
        } else {
          throw new Error(result.message || "Submission failed");
        }
      } catch (error) {
        alert(error.message);
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = "Submit";
        submitBtn.classList.add("btn-primary");
      }
    });
</script>
